/// <reference types="node" />
import { Server as WebSocketServer, ServerOptions } from 'ws';
import { Connection } from './connection';
import { IDisposable } from './disposable';
import { Server as HttpServer, IncomingMessage } from 'http';
import { AddressInfo } from 'net';
export interface IServerOptions {
    host: string;
    port: string;
}
/**
 * WebSocket server used to set up a CDP proxy.
 */
export declare class Server implements IDisposable {
    private readonly wss;
    private readonly httpServer;
    /**
     * Creates a new server, returning a promise that's resolved when it's opened.
     */
    static create(options?: Partial<ServerOptions>): Promise<Server>;
    private readonly connectionEmitter;
    /**
     * Emitter that fires when we get a new connection over CDP.
     */
    readonly onConnection: import("cockatiel").Event<[Connection, IncomingMessage]>;
    /**
     * Address the server is listening on.
     */
    readonly address: AddressInfo;
    protected constructor(wss: WebSocketServer, httpServer: HttpServer);
    /**
     * @inheritdoc
     */
    dispose(): void;
}
