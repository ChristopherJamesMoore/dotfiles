"use strict";
/*---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *--------------------------------------------------------*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const ws_1 = require("ws");
const cockatiel_1 = require("cockatiel");
const connection_1 = require("./connection");
const websocket_1 = require("./transports/websocket");
const http_1 = require("http");
/**
 * WebSocket server used to set up a CDP proxy.
 */
class Server {
    constructor(wss, httpServer) {
        this.wss = wss;
        this.httpServer = httpServer;
        this.connectionEmitter = new cockatiel_1.EventEmitter();
        /**
         * Emitter that fires when we get a new connection over CDP.
         */
        this.onConnection = this.connectionEmitter.addListener;
        /**
         * Address the server is listening on.
         */
        this.address = this.httpServer.address();
        wss.on('connection', (ws, req) => {
            this.connectionEmitter.emit([new connection_1.Connection(new websocket_1.WebSocketTransport(ws)), req]);
        });
    }
    /**
     * Creates a new server, returning a promise that's resolved when it's opened.
     */
    static create(options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const { host = '127.0.0.1', port = 0 } = options;
            const server = http_1.createServer((_req, res) => {
                // The adapter makes an http call to discover the address to connect
                // to first. Mock that out here.
                const resolvedPort = port || server.address().port;
                res.write(JSON.stringify({
                    webSocketDebuggerUrl: `ws://${host}:${resolvedPort}/ws`,
                }));
                res.end();
            });
            const wss = new ws_1.Server({ server });
            server.listen(port);
            return new Server(wss, server);
        });
    }
    /**
     * @inheritdoc
     */
    dispose() {
        this.wss.close();
        this.httpServer.close();
    }
}
exports.Server = Server;
//# sourceMappingURL=server.js.map