import * as WebSocket from 'ws';
import { ITransport } from './transports';
import { CancellationToken } from 'cockatiel';
export declare class WebSocketError extends Error {
    readonly cause: WebSocket.ErrorEvent;
    constructor(cause: WebSocket.ErrorEvent);
}
/**
 * A WebSocket-based transports. Can connect to a URL via
 * {@link WebSocketTransport.create} or be created from a {@link WebSocket}
 * received by other means.
 */
export declare class WebSocketTransport implements ITransport {
    private ws;
    private endEmitter;
    private messageEmitter;
    private errorEmitter;
    /**
     * @inheritdoc
     */
    onMessage: import("cockatiel").Event<object>;
    /**
     * @inheritdoc
     */
    onError: import("cockatiel").Event<Error>;
    /**
     * @inheritdoc
     */
    onEnd: import("cockatiel").Event<void>;
    /**
     * Creates a new websocket transport connecting to the given URL.
     */
    static create(url: string, cancellationToken?: CancellationToken): Promise<WebSocketTransport>;
    constructor(ws: WebSocket);
    /**
     * @inheritdoc
     */
    send(message: object): void;
    /**
     * @inheritdoc
     */
    close(): Promise<void>;
}
